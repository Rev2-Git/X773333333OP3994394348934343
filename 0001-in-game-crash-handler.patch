From b4db46f5ae53a34875bbd8af6496d6aad94607d0 Mon Sep 17 00:00:00 2001
From: Gabriela <93128334+BeastlyGabi@users.noreply.github.com>
Date: Thu, 2 Mar 2023 14:10:04 -0400
Subject: [PATCH] in-game crash handler

---
 source/Main.hx                 |  69 ++-----------
 source/feather/CrashHandler.hx | 170 +++++++++++++++++++++++++++++++++
 2 files changed, 178 insertions(+), 61 deletions(-)
 create mode 100644 source/feather/CrashHandler.hx

diff --git a/source/Main.hx b/source/Main.hx
index eb02cec..5f01020 100644
--- a/source/Main.hx
+++ b/source/Main.hx
@@ -1,33 +1,26 @@
 package;
 
-import flixel.graphics.FlxGraphic;
+#if desktop
+import Discord.DiscordClient;
+#end
 import flixel.FlxG;
 import flixel.FlxGame;
 import flixel.FlxState;
+import flixel.graphics.FlxGraphic;
+import lime.app.Application;
 import openfl.Assets;
 import openfl.Lib;
 import openfl.display.FPS;
 import openfl.display.Sprite;
-import openfl.events.Event;
 import openfl.display.StageScaleMode;
-import lime.app.Application;
+import openfl.events.Event;
 
-#if desktop
-import Discord.DiscordClient;
-#end
+using StringTools;
 
-//crash handler stuff
 #if CRASH_HANDLER
-import openfl.events.UncaughtErrorEvent;
-import haxe.CallStack;
-import haxe.io.Path;
-import sys.FileSystem;
-import sys.io.File;
-import sys.io.Process;
+typedef FlxGame = feather.CrashHandler.FNFGame;
 #end
 
-using StringTools;
-
 class Main extends Sprite
 {
 	var game = {
@@ -104,10 +97,6 @@ class Main extends Sprite
 		FlxG.autoPause = false;
 		FlxG.mouse.visible = false;
 		#end
-		
-		#if CRASH_HANDLER
-		Lib.current.loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onCrash);
-		#end
 
 		#if desktop
 		if (!DiscordClient.isInitialized) {
@@ -118,46 +107,4 @@ class Main extends Sprite
 		}
 		#end
 	}
-
-	// Code was entirely made by sqirra-rng for their fnf engine named "Izzy Engine", big props to them!!!
-	// very cool person for real they don't get enough credit for their work
-	#if CRASH_HANDLER
-	function onCrash(e:UncaughtErrorEvent):Void
-	{
-		var errMsg:String = "";
-		var path:String;
-		var callStack:Array<StackItem> = CallStack.exceptionStack(true);
-		var dateNow:String = Date.now().toString();
-
-		dateNow = dateNow.replace(" ", "_");
-		dateNow = dateNow.replace(":", "'");
-
-		path = "./crash/" + "PsychEngine_" + dateNow + ".txt";
-
-		for (stackItem in callStack)
-		{
-			switch (stackItem)
-			{
-				case FilePos(s, file, line, column):
-					errMsg += file + " (line " + line + ")\n";
-				default:
-					Sys.println(stackItem);
-			}
-		}
-
-		errMsg += "\nUncaught Error: " + e.error + "\nPlease report this error to the GitHub page: https://github.com/ShadowMario/FNF-PsychEngine\n\n> Crash Handler written by: sqirra-rng";
-
-		if (!FileSystem.exists("./crash/"))
-			FileSystem.createDirectory("./crash/");
-
-		File.saveContent(path, errMsg + "\n");
-
-		Sys.println(errMsg);
-		Sys.println("Crash dump saved in " + Path.normalize(path));
-
-		Application.current.window.alert(errMsg, "Error!");
-		DiscordClient.shutdown();
-		Sys.exit(1);
-	}
-	#end
 }
diff --git a/source/feather/CrashHandler.hx b/source/feather/CrashHandler.hx
new file mode 100644
index 0000000..5f6675e
--- /dev/null
+++ b/source/feather/CrashHandler.hx
@@ -0,0 +1,170 @@
+package feather;
+
+import flixel.FlxG;
+import flixel.FlxGame;
+import flixel.addons.ui.FlxUIState;
+import flixel.text.FlxText;
+import haxe.CallStack;
+import haxe.Exception;
+import haxe.io.Path;
+import openfl.events.Event;
+
+/**
+ * a multi-purpose, customizable Crash Handler State
+ * rather than using a fancy executable to show exceptions
+ * when the game crashes, it opens this state instead, while
+ * never letting the game close and instead letting you go back
+ * to the main menu
+ */
+class CrashHandler extends FlxUIState
+{
+	var errorString:String = '';
+
+	public function new(errorString:String = '')
+	{
+		this.errorString = errorString;
+		super();
+	}
+
+	var errorField:FlxText;
+
+	public override function create()
+	{
+		FlxG.mouse.visible = true;
+
+		errorField = new FlxText(0, 0, 0, errorString, 32);
+		errorField.font = "VCR OSD Mono";
+		errorField.alignment = CENTER;
+		errorField.screenCenter(XY);
+		add(errorField);
+	}
+
+	public override function update(elapsed:Float)
+	{
+		super.update(elapsed);
+
+		if (FlxG.keys.justPressed.SPACE)
+		{
+			#if linux
+			Sys.command('/usr/bin/xdg-open', ["https://github.com/ShadowMario/FNF-PsychEngine"]);
+			#else
+			FlxG.openURL("https://github.com/ShadowMario/FNF-PsychEngine");
+			#end
+		}
+
+		if (FlxG.keys.justPressed.ESCAPE)
+		{
+			FlxG.mouse.visible = false;
+			FlxG.switchState(Type.createInstance(MainMenuState, []));
+		}
+	}
+}
+
+/**
+ * Serves as a Dependency to the Crash Handler, it is simply
+ * an extension to FlxGame in order to actually open the crash handler state
+ * when the game crashes
+ */
+class FNFGame extends FlxGame
+{
+	public override function create(_:Event)
+	{
+		try
+		{
+			super.create(_);
+		}
+		catch (e:Exception)
+		{
+			onCrash(e);
+		}
+	}
+
+	public override function draw()
+	{
+		try
+		{
+			super.draw();
+		}
+		catch (e:Exception)
+		{
+			onCrash(e);
+		}
+	}
+
+	public override function update()
+	{
+		try
+		{
+			super.update();
+		}
+		catch (e:Exception)
+		{
+			onCrash(e);
+		}
+	}
+
+	public override function onEnterFrame(_:Event)
+	{
+		try
+		{
+			super.onEnterFrame(_);
+		}
+		catch (e:Exception)
+		{
+			onCrash(e);
+		}
+	}
+
+	public override function onFocus(_:Event)
+	{
+		try
+		{
+			super.onFocus(_);
+		}
+		catch (e:Exception)
+		{
+			onCrash(e);
+		}
+	}
+
+	public override function onFocusLost(_:Event)
+	{
+		try
+		{
+			super.onFocusLost(_);
+		}
+		catch (e:Exception)
+		{
+			onCrash(e);
+		}
+	}
+
+	private function onCrash(e:Exception)
+	{
+		var errorStack:Array<StackItem> = CallStack.exceptionStack(true);
+
+		var fileStack:String = '';
+		var controlsText:String = '';
+		controlsText += '\nConsider taking a Screenshot of this and reporting it\n';
+		controlsText += '\nPress SPACE to go to our GitHub Page\n';
+		controlsText += '\nPress ESCAPE to return to the Main Menu\n';
+		for (item in errorStack)
+		{
+			switch (item)
+			{
+				case FilePos(s, file, line, column):
+					fileStack = '${file} (line ${line})\n';
+				default:
+					#if sys
+					Sys.println(item);
+					#end
+			}
+		}
+
+		return FlxG.switchState(Type.createInstance(CrashHandler, [
+			'= a Critical Error has occurred =
+				${fileStack}\nCaught: ${e}\n
+				${controlsText}'
+		]));
+	}
+}
-- 
2.39.1.windows.1

