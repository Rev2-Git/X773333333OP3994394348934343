// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_CrashHandler
#include <CrashHandler.h>
#endif
#ifndef INCLUDED_FNFGame
#include <FNFGame.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0923e733785a30be_68_new,"FNFGame","new",0xfb3ec202,"FNFGame.new","CrashHandler.hx",68,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_72_create,"FNFGame","create",0x66e5a69a,"FNFGame.create","CrashHandler.hx",72,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_84_draw,"FNFGame","draw",0xd518a822,"FNFGame.draw","CrashHandler.hx",84,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_96_update,"FNFGame","update",0x71dbc5a7,"FNFGame.update","CrashHandler.hx",96,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_108_onEnterFrame,"FNFGame","onEnterFrame",0xfc627012,"FNFGame.onEnterFrame","CrashHandler.hx",108,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_120_onFocus,"FNFGame","onFocus",0x2b6868db,"FNFGame.onFocus","CrashHandler.hx",120,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_132_onFocusLost,"FNFGame","onFocusLost",0xf70e485f,"FNFGame.onFocusLost","CrashHandler.hx",132,0x764e5fdb)
HX_LOCAL_STACK_FRAME(_hx_pos_0923e733785a30be_143_onCrash,"FNFGame","onCrash",0x732ec8ea,"FNFGame.onCrash","CrashHandler.hx",143,0x764e5fdb)

void FNFGame_obj::__construct( ::Dynamic gameWidth, ::Dynamic gameHeight,::hx::Class initialState, ::Dynamic updateFramerate, ::Dynamic drawFramerate, ::Dynamic skipSplash, ::Dynamic startFullscreen){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_68_new)
HXDLIN(  68)		super::__construct(gameWidth,gameHeight,initialState,updateFramerate,drawFramerate,skipSplash,startFullscreen);
            	}

Dynamic FNFGame_obj::__CreateEmpty() { return new FNFGame_obj; }

void *FNFGame_obj::_hx_vtable = 0;

Dynamic FNFGame_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FNFGame_obj > _hx_result = new FNFGame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FNFGame_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0646a488) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0646a488;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x43384a08 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void FNFGame_obj::create( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_72_create)
HXDLIN(  72)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  74)			this->super::create(_);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  76)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(  78)				this->onCrash(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


void FNFGame_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_84_draw)
HXDLIN(  84)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  86)			this->super::draw();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  88)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(  90)				this->onCrash(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


void FNFGame_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_96_update)
HXDLIN(  96)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  98)			this->super::update();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 100)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 102)				this->onCrash(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


void FNFGame_obj::onEnterFrame( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_108_onEnterFrame)
HXDLIN( 108)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 110)			this->super::onEnterFrame(_);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 112)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 114)				this->onCrash(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


void FNFGame_obj::onFocus( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_120_onFocus)
HXDLIN( 120)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 122)			this->super::onFocus(_);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 124)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 126)				this->onCrash(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


void FNFGame_obj::onFocusLost( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_132_onFocusLost)
HXDLIN( 132)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 134)			this->super::onFocusLost(_);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 136)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 138)				this->onCrash(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


void FNFGame_obj::onCrash( ::haxe::Exception e){
            	HX_STACKFRAME(&_hx_pos_0923e733785a30be_143_onCrash)
HXLINE( 144)		::Array< ::Dynamic> errorStack = ::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(true);
HXLINE( 146)		::String fileStack = HX_("",00,00,00,00);
HXLINE( 147)		::String controlsText = HX_("",00,00,00,00);
HXLINE( 148)		controlsText = (controlsText + HX_("\nConsider taking a Screenshot of this and reporting it\n",0f,e0,77,aa));
HXLINE( 149)		controlsText = (controlsText + HX_("\nPress SPACE to go to our GitHub Page\n",23,1e,eb,57));
HXLINE( 150)		controlsText = (controlsText + HX_("\nPress ESCAPE to return to the Main Menu\n",15,f6,e2,3e));
HXLINE( 151)		{
HXLINE( 151)			int _g = 0;
HXDLIN( 151)			while((_g < errorStack->length)){
HXLINE( 151)				 ::haxe::StackItem item = errorStack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN( 151)				_g = (_g + 1);
HXLINE( 153)				if ((item->_hx_getIndex() == 2)) {
HXLINE( 155)					 ::haxe::StackItem s = item->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN( 155)					::String file = item->_hx_getString(1);
HXDLIN( 155)					int line = item->_hx_getInt(2);
HXDLIN( 155)					 ::Dynamic column = item->_hx_getObject(3);
HXLINE( 156)					fileStack = ((((HX_("",00,00,00,00) + file) + HX_(" (line ",a4,24,f7,a5)) + line) + HX_(")\n",c1,23,00,00));
            				}
            				else {
HXLINE( 159)					::Sys_obj::println(item);
            				}
            			}
            		}
HXLINE( 164)		{
HXLINE( 164)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::hx::ClassOf< ::CrashHandler >(),::cpp::VirtualArray_obj::__new(1)->init(0,(((((HX_("= a Critical Error has occurred =\n\t\t\t\t",8b,91,e6,74) + fileStack) + HX_("\nCaught: ",4c,57,61,52)) + ::Std_obj::string(e)) + HX_("\n\n\t\t\t\t",80,30,8d,c7)) + controlsText)))) );
HXDLIN( 164)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 164)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FNFGame_obj,onCrash,(void))


::hx::ObjectPtr< FNFGame_obj > FNFGame_obj::__new( ::Dynamic gameWidth, ::Dynamic gameHeight,::hx::Class initialState, ::Dynamic updateFramerate, ::Dynamic drawFramerate, ::Dynamic skipSplash, ::Dynamic startFullscreen) {
	::hx::ObjectPtr< FNFGame_obj > __this = new FNFGame_obj();
	__this->__construct(gameWidth,gameHeight,initialState,updateFramerate,drawFramerate,skipSplash,startFullscreen);
	return __this;
}

::hx::ObjectPtr< FNFGame_obj > FNFGame_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic gameWidth, ::Dynamic gameHeight,::hx::Class initialState, ::Dynamic updateFramerate, ::Dynamic drawFramerate, ::Dynamic skipSplash, ::Dynamic startFullscreen) {
	FNFGame_obj *__this = (FNFGame_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FNFGame_obj), true, "FNFGame"));
	*(void **)__this = FNFGame_obj::_hx_vtable;
	flixel::FlxGame_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(gameWidth,gameHeight,initialState,updateFramerate,drawFramerate,skipSplash,startFullscreen);
	return __this;
}

FNFGame_obj::FNFGame_obj()
{
}

::hx::Val FNFGame_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCrash") ) { return ::hx::Val( onCrash_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FNFGame_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FNFGame_obj_sStaticStorageInfo = 0;
#endif

static ::String FNFGame_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("draw",04,2c,70,42),
	HX_("update",09,86,05,87),
	HX_("onEnterFrame",f4,a5,93,da),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("onCrash",48,5e,8d,e2),
	::String(null()) };

::hx::Class FNFGame_obj::__mClass;

void FNFGame_obj::__register()
{
	FNFGame_obj _hx_dummy;
	FNFGame_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FNFGame",10,59,f9,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FNFGame_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FNFGame_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FNFGame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FNFGame_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

